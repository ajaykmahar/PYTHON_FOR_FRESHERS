VIDEO - #10
Difference Between List and Tuple in Python.

This is a common question, among the python beginners. 
When they learn list and tuple, they might get confused bcz both behave in a very similar way.
 Both lists and tuples are sequence data types that can store a collection of items.
 item stored can be of any data type.
And you can also access any item by its index.
So the question is, are they different at all?
And if not, why do we have two data types that behave pretty much in the same way?
Can’t we just live with either lists or tuples?

Topics:
Key Differences Between List and Tuple
Mutable vs. immutable
Homogeneous Vs Heterogeneous
Reused vs. Copied
Supported built in methods
Dictionary keys.
Size difference
Why do we need mutable and immutable objects.
Appending Performance.
Creating performance. 
Easiness of Debugging
Memory Efficiency
Now let’s get started….
What is mutable and immutable ?
The main difference between lists and tuples is the lists are mutable whereas tuples are immutable.
What does that mean?
A mutable data type means that a python object of this type can be modified.
An immutable object can’t.
Let’s see what this means in action.
Let’s create a list and assign it to a variable.
Now let’s see what happens when we try to modify the first item of the list.
Now what if we want to try the same thing with a tuple instead of a list? Let’s see.
We get an error saying that a tuple object doesn’t support item assignment.
The reason we get this error is because tuple objects, unlike lists, are immutable, which means you can’t modify a tuple object after it’s created.
>>> a = ("apples", "bananas", "oranges")
>>> a = ("berries", "bananas", "oranges")
>>> a
('berries', 'bananas', 'oranges')
Let me ask you a question does this code modify the tuple ?
If your answer is YES, You are probably confusing variables with objects. This is a very common misconception among beginners.
Remember that a variable is nothing but a reference to the actual python object in memory.
The variable itself is not the object.
>>> a = ["apples", "bananas", "oranges"]
you can actually retrieve the location of the list object in memory by inspecting a using the id() function.
Now if you modify the first index of the list, and check the id() again,
Now, let’s see what happens if we perform the same thing on tuples.
NOTE: if no other variables in your program is referring to the older tuple then python’s garbage collector will delete the older tuple from the memory completely.

this concept of mutability is the key difference between lists and tuples.

Homogeneous Vs Heterogeneous:
Tuples are used to store heterogeneous elements, which are elements belonging to different data types. Lists, on the other hand, are used to store homogeneous elements, which are elements that belong to the same type.
However, note that this is only a semantic difference. We can add multiple type objects into list.
Reused vs. Copied:
Tuples cannot be copied. The reason is that tuples are immutable.
Supported built in methods:
Lists have several built-in methods while tuple does no have must built-in methods.
dir()
Dictionary keys:
the you wants to utilize the sequence as a dictionary key, a tuple is a better choice because dictionary keys are immutable. 
Size difference:
Lists consume more memory as compared to the tuple.	
print(list.__sizeof__())
Why do we need mutable and immutable objects.
Appending Performance:
 Mutability is more efficient when you know you will be frequently modifying an object.



lst = []
for item in range(100000):
    lst.append(item)
print(lst)
 

This works alright. You keep modifying the list object in place
But can you even imagine what would happen if we had used a tuple instead?
tup = ()
for item in range(100000):
    tup += (item,)
print(tup)

Since tuples are immutable, you are basically copying the contents of the tuple T to a new tuple object at EACH iteration.
 this is a huge performance problem.


Easiness of Debugging: 
Mutability is fast for appending task but one thing that can be really annoying with mutable objects is debugging.
In the list, the unexpected changes and errors are more likely to occur, but in the case of a tuple, it is hard to take place.
Let’s take a look at this very simple example.
>>> a = [1, 3, 5, 7]
>>> b = a
>>> b[0] = -10
>>> a
[-10, 3, 5, 7]

Of course you can look at the code and think that it is easy to debug.
but imagine if you have a big project with many references to the same mutable object.
It will be very challenging to track all the changes to this object because any modification by any of those references will modify the object.
Memory Efficiency:
if you create immutable objects that hold the same value, python (under certain conditions) might bundle these different objects into one.
Integers: [-5 to 256]
Tuple: ()
Strings - intern: “python”
Remember that Strings (as well as Integers, Floats, and Bools) are all examples of immutable objects as well.


Conclusion
In most of the aspects, the tuples are more efficient than the lists as it consumes less memory, less time and does not change unexpectedly. However, both the data types are used in the python programs where lists are best used for homogeneous data. On the other hand, tuples are mainly used with heterogeneous data.
